<?xml version="1.0" encoding="UTF-8" ?>
<!-- Test file for namespace attack vectors and security scenarios -->
<rss version="2.0"
  xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:wp="http://wordpress.org/export/1.2/">
  
<channel>
<title>Namespace Security Tests</title>
<wp:wxr_version>1.2</wp:wxr_version>

<!-- Test 1: Namespace hijacking attempt -->
<item xmlns:wp="http://malicious.example.com/hijack/">
<title>Hijacked Namespace</title>
<wp:post_id>1</wp:post_id>
<wp:post_type>post</wp:post_type>
<wp:status>publish</wp:status>
<content:encoded><![CDATA[This attempts to hijack the wp namespace]]></content:encoded>
<wp:postmeta>
<wp:meta_key>_malicious</wp:meta_key>
<wp:meta_value><![CDATA[hijacked_data]]></wp:meta_value>
</wp:postmeta>
</item>

<!-- Test 2: Billion laughs namespace variant -->
<item xmlns:lol="http://example.com/lol/">
<title>Namespace Bomb</title>
<wp:post_id>2</wp:post_id>
<wp:post_type>post</wp:post_type>
<wp:status>publish</wp:status>
<content:encoded><![CDATA[&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;]]></content:encoded>
</item>

<!-- Test 3: Extremely deep namespace nesting -->
<item xmlns:a="http://a.com/" xmlns:b="http://b.com/" xmlns:c="http://c.com/">
<title>Deep Nesting</title>
<wp:post_id>3</wp:post_id>
<wp:post_type>post</wp:post_type>
<wp:status>publish</wp:status>
<content:encoded><![CDATA[Deep namespace nesting test]]></content:encoded>
<a:level1>
<b:level2 xmlns:d="http://d.com/">
<c:level3>
<d:level4 xmlns:e="http://e.com/">
<e:level5>Deep nesting</e:level5>
</d:level4>
</c:level3>
</b:level2>
</a:level1>
</item>

<!-- Test 4: Namespace with null bytes (if not escaped) -->
<item xmlns:null="http://example.com/null">
<title>Null Byte Test</title>
<wp:post_id>4</wp:post_id>
<wp:post_type>post</wp:post_type>
<wp:status>publish</wp:status>
<content:encoded><![CDATA[Testing null byte handling]]></content:encoded>
</item>

<!-- Test 6: Case sensitivity test -->
<item xmlns:WP="http://wordpress.org/export/1.2/" xmlns:Wp="http://malicious.com/">
<title>Case Sensitivity</title>
<wp:post_id>6</wp:post_id>
<WP:post_id>666</WP:post_id>
<Wp:post_id>999</Wp:post_id>
<wp:post_type>post</wp:post_type>
<wp:status>publish</wp:status>
<content:encoded><![CDATA[Case sensitivity in namespaces]]></content:encoded>
</item>

<!-- Test 7: Schema mismatch -->
<item xmlns:wp="https://wordpress.org/export/1.2/">
<title>HTTPS Schema</title>
<wp:post_id>7</wp:post_id>
<wp:post_type>post</wp:post_type>
<wp:status>publish</wp:status>
<content:encoded><![CDATA[HTTPS vs HTTP namespace]]></content:encoded>
</item>

<!-- Test 8: Invalid characters in namespace prefix -->
<item xmlns:123invalid="http://example.com/" xmlns:-invalid="http://example.com/" xmlns:.invalid="http://example.com/">
<title>Invalid Prefixes</title>
<wp:post_id>8</wp:post_id>
<wp:post_type>post</wp:post_type>
<wp:status>publish</wp:status>
<content:encoded><![CDATA[Invalid namespace prefixes]]></content:encoded>
</item>

<!-- Test 9: Reserved XML namespaces -->
<item xmlns:xml="http://www.w3.org/XML/1998/namespace" xmlns:xmlns="http://www.w3.org/2000/xmlns/">
<title>Reserved Namespaces</title>
<wp:post_id>9</wp:post_id>
<wp:post_type>post</wp:post_type>
<wp:status>publish</wp:status>
<content:encoded><![CDATA[Using reserved XML namespaces]]></content:encoded>
<xml:lang>en</xml:lang>
</item>

<!-- Test 10: Namespace undeclaration (XML 1.1 feature) -->
<item xmlns:temp="http://example.com/">
<title>Namespace Undeclaration</title>
<wp:post_id>10</wp:post_id>
<wp:post_type>post</wp:post_type>
<wp:status>publish</wp:status>
<content:encoded><![CDATA[Namespace undeclaration test]]></content:encoded>
<temp:data xmlns:temp="">This should undeclare temp namespace</temp:data>
</item>

</channel>
</rss>
